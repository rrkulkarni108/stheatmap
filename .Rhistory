axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 8),  # set font size
#plot.margin = margin(10, 10, 10, 20)  # make left margin bigger to fit  y-axis labels
) +
labs(
title = "Heatmap of County-Level Drought Severity",
x = "County",
y = "Week"
)
print(heatmap_plot)
}
## Return output - heatmap of the drought clusters with y-axis the weeks from 1 to Week n and X-axis the labels of all the counties in the state. Colored by palette scheme.
##########################################################################
# Function that assigns clusters and reformats to be appropriate input for other functions
###############################################################################################
# Description of supplied parameters:
# X - n x 5 dataframe with columns MapDate, County, Drought_Level, Percentage, Week
# K - an integer value of number of clusters, for Drought data typically 6 by default
# OUTPUT list of clusters for each week, hierarchical clustering method description, cluster summary
# Input: Dataframe with columns MapDate, County, Drought_Level, Percentage, Week
AssignClustersByWeek <- function(X, K = 6) {
# Compute average percentages over time for each week in each county
X_avg <- X %>%
group_by(County, MapDate, Drought_Level) %>%
summarise(Avg_Percentage = mean(Percentage, na.rm = TRUE)) %>%
ungroup()
# Reshape data to wide format
X_wide = reshape2::dcast(X_avg, County + MapDate ~ Drought_Level, value.var = "Avg_Percentage")
# Extract relevant columns for clustering
X_data <- X_wide[, c("None", "D0", "D1", "D2", "D3", "D4")]
X_data <- as.matrix(X_data)
# Compute the distance matrix
dist_mat <- dist(X_data, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(dist_mat, method = "average")
# Cut the dendrogram into K clusters
clusters <- cutree(hc, k = K)
# Assign clusters to the wide-format data
X_wide$Cluster <- clusters
# Compute cluster summaries
cluster_summary <- X_wide %>%
group_by(Cluster) %>%
summarise_at(vars("None", "D0", "D1", "D2", "D3", "D4"), mean, na.rm = TRUE)
# Determine dominant drought levels for clusters
cluster_summary$Drought_Level <- apply(cluster_summary[, c("None", "D0", "D1", "D2", "D3", "D4")], 1, function(x) {
names(x)[which.max(x)]
})
# Merge cluster labels back into the data
X_wide <- merge(X_wide, cluster_summary[, c("Cluster", "Drought_Level")], by = "Cluster")
# Assign cluster categories for each week in each county
X_with_clusters <- X %>%
left_join(X_wide[, c("County", "MapDate", "Cluster", "Drought_Level")], by = c("County", "MapDate"))
return(list(X_with_clusters = X_with_clusters, hc = hc, cluster_summary = cluster_summary))
}
#' Main function that visualizes drought data using heatmaps
#'
#' @param drought_data n by p matrix containing n data points to cluster.
#' @param start_date string of format "yyyy-mm-dd", starting date of time series
#' @param end_date string of format "yyyy-mm-dd", ending date of time series
#' @return a heatmap plot of the state's county names on x axis, week time series on y axis and heatmap colored by drought severity category
#' @export
#'
#' @examples
#' # Give example
drought_main <- function(drought_data, start_date, end_date){
drought_data_subset <- SubsetData(drought_data, start_date, end_date)  # Subset and reshape drought data
drought_clusters <- AssignClustersByWeek(drought_data_subset, K = 6)  # Assign clusters
drought_heatmap_data <- CreateHeatmap(drought_clusters$X_with_clusters)  # Prepare data for heatmap
# Generate the drought heatmap plot
drought_plot <- PlotHeat(drought_heatmap_data)
return(plot = drought_plot)
}
drought_main(X, start_date = "2001-01-01", end_date = "2006-06-01")
# Function that plots data and allows for more control over plotting parameters
###############################################################################################
# Description of supplied parameters:
# X - n x 4 dataframe from CreateHeatmap() function
# palette - a vector of size 6 of color and hexcode for clusters, which can be specified by user. Default vector color scheme given.
# OUTPUT - heatmap of the drought clusters with y-axis the weeks from 1 to Week n and X-axis the labels of all the counties in the state. Colored by palette scheme.
PlotHeat <- function(X, palette = c("1" = "#008000", #None severity
"2" = "#66BD63", #D0 severity
"3" = "yellow", #D1 severity
"4" = "orange", #D2 severity
"5" =  "red", #D3 severity
"6" =  "darkred" #D4 severity
)) {
# Plot the heatmap
X$County <- stringr::str_remove(X$County, " County") #remove the word county since it takes a lot of space in X label
print(X$Week)
print(class(X$Week))
#reorder weeks from least to greatest
#X$Week <- as.numeric(as.character(X$Week))
X$Week <- as.integer(factor(X$Week, levels = (sort(unique(X$Week)))))#X$Week <- factor(X$Week, levels = rev(sort(unique(X$Week))))
print(X$Week)
heatmap_plot <- ggplot(data = X, aes(x = County, y = Week, fill = Cluster)) +
geom_tile() +
scale_fill_manual(
values = palette,
name = "Drought Severity"
) +
scale_y_reverse(breaks = seq(0, max(X$Week), by = 100)) +  # This flips the Y-axis
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 8),  # set font size
#plot.margin = margin(10, 10, 10, 20)  # make left margin bigger to fit  y-axis labels
) +
labs(
title = "Heatmap of County-Level Drought Severity",
x = "County",
y = "Week"
)
print(heatmap_plot)
}
## Return output - heatmap of the drought clusters with y-axis the weeks from 1 to Week n and X-axis the labels of all the counties in the state. Colored by palette scheme.
##########################################################################
# Function that assigns clusters and reformats to be appropriate input for other functions
###############################################################################################
# Description of supplied parameters:
# X - n x 5 dataframe with columns MapDate, County, Drought_Level, Percentage, Week
# K - an integer value of number of clusters, for Drought data typically 6 by default
# OUTPUT list of clusters for each week, hierarchical clustering method description, cluster summary
# Input: Dataframe with columns MapDate, County, Drought_Level, Percentage, Week
AssignClustersByWeek <- function(X, K = 6) {
# Compute average percentages over time for each week in each county
X_avg <- X %>%
group_by(County, MapDate, Drought_Level) %>%
summarise(Avg_Percentage = mean(Percentage, na.rm = TRUE)) %>%
ungroup()
# Reshape data to wide format
X_wide = reshape2::dcast(X_avg, County + MapDate ~ Drought_Level, value.var = "Avg_Percentage")
# Extract relevant columns for clustering
X_data <- X_wide[, c("None", "D0", "D1", "D2", "D3", "D4")]
X_data <- as.matrix(X_data)
# Compute the distance matrix
dist_mat <- dist(X_data, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(dist_mat, method = "average")
# Cut the dendrogram into K clusters
clusters <- cutree(hc, k = K)
# Assign clusters to the wide-format data
X_wide$Cluster <- clusters
# Compute cluster summaries
cluster_summary <- X_wide %>%
group_by(Cluster) %>%
summarise_at(vars("None", "D0", "D1", "D2", "D3", "D4"), mean, na.rm = TRUE)
# Determine dominant drought levels for clusters
cluster_summary$Drought_Level <- apply(cluster_summary[, c("None", "D0", "D1", "D2", "D3", "D4")], 1, function(x) {
names(x)[which.max(x)]
})
# Merge cluster labels back into the data
X_wide <- merge(X_wide, cluster_summary[, c("Cluster", "Drought_Level")], by = "Cluster")
# Assign cluster categories for each week in each county
X_with_clusters <- X %>%
left_join(X_wide[, c("County", "MapDate", "Cluster", "Drought_Level")], by = c("County", "MapDate"))
return(list(X_with_clusters = X_with_clusters, hc = hc, cluster_summary = cluster_summary))
}
#' Main function that visualizes drought data using heatmaps
#'
#' @param drought_data n by p matrix containing n data points to cluster.
#' @param start_date string of format "yyyy-mm-dd", starting date of time series
#' @param end_date string of format "yyyy-mm-dd", ending date of time series
#' @return a heatmap plot of the state's county names on x axis, week time series on y axis and heatmap colored by drought severity category
#' @export
#'
#' @examples
#' # Give example
drought_main <- function(drought_data, start_date, end_date){
drought_data_subset <- SubsetData(drought_data, start_date, end_date)  # Subset and reshape drought data
drought_clusters <- AssignClustersByWeek(drought_data_subset, K = 6)  # Assign clusters
drought_heatmap_data <- CreateHeatmap(drought_clusters$X_with_clusters)  # Prepare data for heatmap
# Generate the drought heatmap plot
drought_plot <- PlotHeat(drought_heatmap_data)
return(plot = drought_plot)
}
drought_main(X, start_date = "2001-01-01", end_date = "2006-06-01")
PlotHeat <- function(X, palette = c("1" = "#008000", #None severity
"2" = "#66BD63", #D0 severity
"3" = "yellow", #D1 severity
"4" = "orange", #D2 severity
"5" =  "red", #D3 severity
"6" =  "darkred" #D4 severity
)) {
# Plot the heatmap
X$County <- stringr::str_remove(X$County, " County") #remove the word county since it takes a lot of space in X label
print(X$Week)
print(class(X$Week))
#reorder weeks from least to greatest
#X$Week <- as.numeric(as.character(X$Week))
X$Week <- as.integer(factor(X$Week, levels = (sort(unique(X$Week)))))#X$Week <- factor(X$Week, levels = rev(sort(unique(X$Week))))
print(X$Week)
heatmap_plot <- ggplot(data = X, aes(x = County, y = Week, fill = Cluster)) +
geom_tile() +
scale_fill_manual(
values = palette,
name = "Drought Severity"
) +
scale_y_reverse(breaks = seq(0, max(X$Week), by = 50)) +  # This flips the Y-axis
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
legend.title = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 8),  # set font size
#plot.margin = margin(10, 10, 10, 20)  # make left margin bigger to fit  y-axis labels
) +
labs(
title = "Heatmap of County-Level Drought Severity",
x = "County",
y = "Week"
)
print(heatmap_plot)
}
## Return output - heatmap of the drought clusters with y-axis the weeks from 1 to Week n and X-axis the labels of all the counties in the state. Colored by palette scheme.
##########################################################################
# Function that assigns clusters and reformats to be appropriate input for other functions
###############################################################################################
# Description of supplied parameters:
# X - n x 5 dataframe with columns MapDate, County, Drought_Level, Percentage, Week
# K - an integer value of number of clusters, for Drought data typically 6 by default
# OUTPUT list of clusters for each week, hierarchical clustering method description, cluster summary
# Input: Dataframe with columns MapDate, County, Drought_Level, Percentage, Week
AssignClustersByWeek <- function(X, K = 6) {
# Compute average percentages over time for each week in each county
X_avg <- X %>%
group_by(County, MapDate, Drought_Level) %>%
summarise(Avg_Percentage = mean(Percentage, na.rm = TRUE)) %>%
ungroup()
# Reshape data to wide format
X_wide = reshape2::dcast(X_avg, County + MapDate ~ Drought_Level, value.var = "Avg_Percentage")
# Extract relevant columns for clustering
X_data <- X_wide[, c("None", "D0", "D1", "D2", "D3", "D4")]
X_data <- as.matrix(X_data)
# Compute the distance matrix
dist_mat <- dist(X_data, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(dist_mat, method = "average")
# Cut the dendrogram into K clusters
clusters <- cutree(hc, k = K)
# Assign clusters to the wide-format data
X_wide$Cluster <- clusters
# Compute cluster summaries
cluster_summary <- X_wide %>%
group_by(Cluster) %>%
summarise_at(vars("None", "D0", "D1", "D2", "D3", "D4"), mean, na.rm = TRUE)
# Determine dominant drought levels for clusters
cluster_summary$Drought_Level <- apply(cluster_summary[, c("None", "D0", "D1", "D2", "D3", "D4")], 1, function(x) {
names(x)[which.max(x)]
})
# Merge cluster labels back into the data
X_wide <- merge(X_wide, cluster_summary[, c("Cluster", "Drought_Level")], by = "Cluster")
# Assign cluster categories for each week in each county
X_with_clusters <- X %>%
left_join(X_wide[, c("County", "MapDate", "Cluster", "Drought_Level")], by = c("County", "MapDate"))
return(list(X_with_clusters = X_with_clusters, hc = hc, cluster_summary = cluster_summary))
}
#' Main function that visualizes drought data using heatmaps
#'
#' @param drought_data n by p matrix containing n data points to cluster.
#' @param start_date string of format "yyyy-mm-dd", starting date of time series
#' @param end_date string of format "yyyy-mm-dd", ending date of time series
#' @return a heatmap plot of the state's county names on x axis, week time series on y axis and heatmap colored by drought severity category
#' @export
#'
#' @examples
#' # Give example
drought_main <- function(drought_data, start_date, end_date){
drought_data_subset <- SubsetData(drought_data, start_date, end_date)  # Subset and reshape drought data
drought_clusters <- AssignClustersByWeek(drought_data_subset, K = 6)  # Assign clusters
drought_heatmap_data <- CreateHeatmap(drought_clusters$X_with_clusters)  # Prepare data for heatmap
# Generate the drought heatmap plot
drought_plot <- PlotHeat(drought_heatmap_data)
return(plot = drought_plot)
}
drought_main(X, start_date = "2001-01-01", end_date = "2006-06-01")
drought_main(X, start_date = "2001-01-01", end_date = "2016-06-01")
drought_main(X, start_date = "2001-01-01", end_date = "2021-06-01")
library(stheatmap)
# Plot the heatmap for drought
out <- drought_main(X, start_date = "2001-01-01", end_date = "2016-06-01")
library(stheatmap)
# Plot the heatmap for drought
out <- drought_main(X, start_date = "2001-01-01", end_date = "2006-06-01")
load(system.file("data/ENSO.Rda", package = "stheatmap"))
load(system.file("data/Drought.Rda", package = "stheatmap"))
# Plot the heatmap for drought
out <- drought_main(X, start_date = "2001-01-01", end_date = "2006-06-01")
# Plot the heatmap for drought
out <- drought_main(X, start_date = "2001-01-01", end_date = "2021-06-01")
set.seed(123)
drought_data_example <- data.frame(
County = rep(paste("County", 1:5), each = 10),
MapDate = rep(seq.Date(from = as.Date("2001-01-01"), by = "week", length.out = 10), 5),
Week = rep(1:10, 5),
Drought_Level = sample(c("None", "D0", "D1", "D2"), 50, replace = TRUE),
Percentage = runif(50, 0, 100)
)
drought_data_example
set.seed(123)
drought_data_example <- data.frame(
County = rep(paste("Alameda", 1:5), each = 10),
MapDate = rep(seq.Date(from = as.Date("2001-01-01"), by = "week", length.out = 10), 5),
Week = rep(1:10, 5),
Drought_Level = sample(c("None", "D0", "D1", "D2"), 50, replace = TRUE),
Percentage = runif(50, 0, 100)
)
# Run drought_main(), from January to March 2001
drought_main(drought_data = drought_data_example, start_date = "2001-01-01", end_date = "2001-03-31")
set.seed(123)
drought_data_example <- data.frame(
County = rep(paste("Alameda", 1:5), each = 10),
MapDate = rep(seq.Date(from = as.Date("2001-01-01"), by = "week", length.out = 10), 5),
Week = rep(1:10, 5),
Drought_Level = sample(c("None", "D0", "D1", "D2"), 50, replace = TRUE),
Percentage = runif(50, 0, 100)
)
drought_data_example
set.seed(123) # For reproducibility
# Parameters
n_counties <- 5
n_weeks <- 24
counties <- paste("County", 1:n_counties)
start_date <- as.Date("2001-01-01")
drought_levels <- c("None", "D0", "D1", "D2", "D3", "D4")
# Create an empty data frame
df <- data.frame(
County = character(),
MapDate = as.Date(character()),
Week = integer(),
Drought_Level = character(),
Percentage = numeric(),
stringsAsFactors = FALSE
)
for (c in counties) {
for (w in 1:n_weeks) {
# For each county-week, assign a random distribution of percentages
# across all 6 drought levels that sum to 100.
random_vals <- runif(6)
percentages <- (random_vals / sum(random_vals)) * 100
# Create rows for each drought level
for (i in seq_along(drought_levels)) {
df <- rbind(df, data.frame(
County = c,
MapDate = start_date + (w - 1)*7,
Week = w,
Drought_Level = drought_levels[i],
Percentage = percentages[i],
stringsAsFactors = FALSE
))
}
}
}
# Check a few rows
head(df)
set.seed(123) # For reproducibility
# Parameters
n_counties <- 5
n_weeks <- 24
counties <- paste("County", 1:n_counties)
start_date <- as.Date("2001-01-01")
drought_levels <- c("None", "D0", "D1", "D2", "D3", "D4")
# Create an empty data frame
df <- data.frame(
County = character(),
MapDate = as.Date(character()),
Week = integer(),
Drought_Level = character(),
Percentage = numeric(),
stringsAsFactors = FALSE
)
for (c in counties) {
for (w in 1:n_weeks) {
# For each county-week, assign a random distribution of percentages
# across all 6 drought levels that sum to 100.
random_vals <- runif(6)
percentages <- (random_vals / sum(random_vals)) * 100
# Create rows for each drought level
for (i in seq_along(drought_levels)) {
df <- rbind(df, data.frame(
County = c,
MapDate = start_date + (w - 1)*7,
Week = w,
Drought_Level = drought_levels[i],
Percentage = percentages[i],
stringsAsFactors = FALSE
))
}
}
}
# Check a few rows
head(df)
drought_main(drought_data = df, start_date = "2001-01-01", end_date = "2001-09-31")
X
# Manually create a data frame similar to the provided format
drought_data_example <- data.frame(
MapDate = c(20210601L, 20210525L, 20210518L, 20210511L, 20210504L),
FIPS = rep(6001L, 5),
County = rep("Alameda County", 5),
State = rep("CA", 5),
None = c(0.00, 0.00, 0.00, 0.00, 0.00),
D0 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D1 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D2 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D3 = c(36.14, 36.14, 60.04, 100.00, 100.00),
D4 = c(63.86, 63.86, 39.96, 0.00, 0.00),
ValidStart = as.Date(c("2021-06-01", "2021-05-25", "2021-05-18", "2021-05-11", "2021-05-04"))
)
drought_data_example
drought_main(drought_data = drought_data_example, start_date = "2021-01-01", end_date = "2001-03-31")
# Manually create a data frame similar to the provided format
drought_data_example <- data.frame(
MapDate = c(20210601L, 20210525L, 20210518L, 20210511L, 20210504L),
FIPS = rep(6001L, 5),
County = rep("Alameda County", 5),
State = rep("CA", 5),
None = c(0.00, 0.00, 0.00, 0.00, 0.00),
D0 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D1 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D2 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D3 = c(36.14, 36.14, 60.04, 100.00, 100.00),
D4 = c(63.86, 63.86, 39.96, 0.00, 0.00),
ValidStart = as.Date(c("2021-01-01", "2021-05-25", "2021-05-18", "2021-05-11", "2021-05-04"))
)
drought_data_example
# Run drought_main(), from January to March 2001
drought_main(drought_data = drought_data_example, start_date = "2021-01-01", end_date = "2001-05-25")
# Run drought_main(), from January to March 2001
drought_main(drought_data = drought_data_example, start_date = "2021-01-01", end_date = "2021-05-25")
# Manually create a data frame similar to the provided format
drought_data_example <- data.frame(
MapDate = c(20210601, 20210525, 20210518, 20210511, 20210504),
FIPS = rep(6001L, 5),
County = rep("Alameda County", 5),
State = rep("CA", 5),
None = c(0.00, 0.00, 0.00, 0.00, 0.00),
D0 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D1 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D2 = c(0.00, 0.00, 0.00, 0.00, 0.00),
D3 = c(36.14, 36.14, 60.04, 100.00, 100.00),
D4 = c(63.86, 63.86, 39.96, 0.00, 0.00),
ValidStart = as.Date(c("2021-01-01", "2021-05-25", "2021-05-18", "2021-05-11", "2021-05-04"))
)
drought_data_example
# Run drought_main(), from January to March 2001
drought_main(drought_data = drought_data_example, start_date = "2021-01-01", end_date = "2021-05-25")
X
# Manually create a data frame similar to the provided format
drought_data_example <- data.frame(
MapDate = c(20210101, 20210201, 20210207, 20210304 ,20210315, 20210404, 20210525, 20210518, 20210511, 20210504),
FIPS = rep(6001, 10),
County = rep("Alameda County", 10),
State = rep("CA", 10),
None = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D0 = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D1 = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D2 = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D3 = c(36.14, 36.14, 60.04, 100.00, 100.00, 36.14, 60.04, 100.00, 100.00, 100.00 ),
D4 = c(63.86, 63.86, 39.96, 0.00, 0.00, 63.86, 39.96, 0.00, 0.00, 0.00),
ValidStart = as.Date(c("2021-01-01", "2021-02-01", "2021-02-07", "2021-03-04","2021-03-15", "2021-04-04", "2021-05-25", "2021-05-18", "2021-05-11", "2021-05-04"))
)
drought_data_example
# Run drought_main(), from January to March 2001
drought_main(drought_data = drought_data_example, start_date = "2021-01-01", end_date = "2021-05-25")
c(rep("Alameda County", 5), rep("Alpine County", 5))
drought_data_example <- data.frame(
MapDate = c(20210101, 20210201, 20210207, 20210304 ,20210315, 20210404, 20210525, 20210518, 20210511, 20210504),
FIPS = rep(6001, 10),
County = c(rep("Alameda County", 5), rep("Alpine County", 5)),
State = rep("CA", 10),
None = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D0 = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D1 = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D2 = c(0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00),
D3 = c(36.14, 36.14, 60.04, 100.00, 100.00, 36.14, 60.04, 100.00, 100.00, 100.00 ),
D4 = c(63.86, 63.86, 39.96, 0.00, 0.00, 63.86, 39.96, 0.00, 0.00, 0.00),
ValidStart = as.Date(c("2021-01-01", "2021-02-01", "2021-02-07", "2021-03-04","2021-03-15", "2021-04-04", "2021-05-25", "2021-05-18", "2021-05-11", "2021-05-04"))
)
drought_data_example
# Run drought_main(), from January to March 2001
drought_main(drought_data = drought_data_example, start_date = "2021-01-01", end_date = "2021-05-25")
devtools::install_github("rrkulkarni108/stheatmap", build_vignettes = TRUE)
detach("package:stheatmap", unload = TRUE)
devtools::install_github("rrkulkarni108/stheatmap", build_vignettes = TRUE)
X
58*1066
devtools::document()
load("Data/Drought.Rda")
X <- X
save(X, file = "data/X.rda", compress = "xz")
load("data/Drought.rda")
Drought <- X
rm(X) # remove X if you no longer need it
save(Drought, file = "data/Drought.rda", compress = "xz")
devtools::document()
devtools::document()
load("data/Drought.rda")
X
devtools::document()
data("Drought")
Drought
rm(list=ls()) # Clear workspace
load("data/Drought.rda")
ls()
rm(list=ls()) # Clear workspace
load("data/Drought.rda")
ls()
devtools::document()
